짜증나는 JS 정리 2일차 + 웹 RTC 기본

1. 호이스팅
함수 표현식 
let hello = function () {
  return "test1";
}; // 함수   => 함수가 변수처럼 let에 담김

함수 선언식
function test() {
  return "test2";
} // 함수 선언식 => 생각하는 일반적인 함수의 형태

함수 선언식은 호이스팅이 된다.
코드의 실행전에 코드의 최상단으로 자동으로 끌어올려지는것으로 취급한다.
함수를 호출하고, 그다음에 함수 선언식 방식으로 함수를 써도 읽어지는게 가능하다.

함수표현식을 화살표함수로 바꾸면 간단해짐 (화살표함수는 함수 표현식이기 때문에 호이스팅이 되지 않는다.)
let hello = () => {
  return "test3";
}; // 함수 표현식

let test2 = () => {
  let z = 999;
  return z;
}

2. js 객체의 요소 접근법 2가지
let person = {
  name: "김싸피",  => key & value = property
  age: 25
}; // 객체 리터럴 방식

console.log(person.name);
console.log(person["name"]);

console.log(test("name"));

function test(key) {
  return person[key];
}.

프로퍼티의 값을 삭제하고 싶을때 ? value 값을 null로 바꾸기
delete person.name 을 하면 object 상에선 사라지지만 메모리에는 그값이 그대로 남아있다.

+@ 배열 정렬
const compare = (a, b) => {
  if (a > b) {
    return 1;
  }

  if (a < b) {
    return -1;
  }

  return 0;
};

arr.sort(compare); -> 비교함수 없으면 문자열 기준으로 정렬을 하므로 비교함수가 필요함


======================

webRTC? 

WebRTC는 audio, video, data를 웹과 native 앱 등에서 
realtime으로 커뮤니케이션 할 수 있게 해주는 오픈 소스 프로젝트

기본예제코드

const constraints = {
  audio: true,
  video: { width: 1280, height: 720 },
};

navigator.mediaDevices
  .getUserMedia(constraints)
  .then((mediaStream) => {
    const video = document.querySelector("video");
    video.srcObject = mediaStream;
    video.onloadedmetadata = () => {
      video.play();
    };
  })
  .catch((err) => {
    // always check for errors at the end.
    console.error(`${err.name}: ${err.message}`);
  });




