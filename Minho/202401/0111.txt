Props (properties) (객체형식으로 다른 컴포넌트에 원하는 요소들을 전달하는 기법)

다른 컴포넌트에서 값을 전달할 때 사용하는 개념
  return (
    <div className="App">
      <Myheader />
      <Counter initalValue={5} />
      <Myfooter />
    </div>
  );
자식 컴포넌트에세 initalValue라는 value를 붙여 5라는 값을 전달하는 것이 가능하다.

이 값을 받기 위해서는 매개변수로 받아야함
const Counter = (props) => {
  console.log(props);
이런식으로 props 매개변수를 통해서 5 값을 받는게 가능한데 이때 객체를 받음
즉 이값을 사용하기 위해서는 점 표기법으로 접근해야함.

const Counter = (props) => {
  console.log(props.initalValue);

props를 여러개 보내는것이 가능함.
 <Counter a={1} b={2} c={3} d={4} e={5} initalValue={5} />

보기가 불편하므로 객체로 만듦

  let name = "김싸피";

  const number = 5;

  const counterProps = {
    a: 1,
    b: 2,
    c: 3,
    d: 4,
    e: 5,
    initialValue: 5,
  };

  return (
    <div className="App">
      <Myheader />
      <Counter {...counterProps} />
      <Myfooter />
    </div>
  );
}

객체의 spread 연산을 통해 객체에 있는 내용을 전부 자식요소로 보내는 것이 가능하다.
받는쪽에서도 객체로 받기 떄문에 비구조화 할당으로 받아 원하는 값만 받는 것도 가능하다.

const Counter = ({ initialValue }) => {
  const [count, setCount] = useState(initialValue);

비구조화할당으로 initalValue 값을 받아서 5를 받는다.

Counter.defaultProps = {
  initialValue: 0,
};

부모에서 initialValue props값을 전달 받지 못했을떄, 전달 받지 못한 값의
기본값을 설정 가능하다.

    <OddEvenResult count={count} />
count라는 state가 계속 바뀌는 값도 props로 전달하는 것이 가능하다.
props가 바뀌면 리렌더링이 일어남
즉 부모요소의 컴포넌트가 바뀌면 자식요소의 컴포넌트도 계속 리렌더링됨
1. 본인의 state 바뀌면 리렌더 됨
2. 나한테 내려오는 props가 바뀌면 리렌더
3. 두 경우 해당안되더라고 부모가 리렌더링되면 리렌더링됨.

const OddEvenResult = ({ count }) => {
  console.log(count);
  return <>{count % 2 === 0 ? "짝수" : "홀수"}</>;
};

export default OddEvenResult;

props 는 컴포넌트 자체를 보내 전달하는 것도 가능함.

const Container = ({ children }) => {
  return (
    <div style={{ margin: 20, padding: 20, border: "1px solid gray" }}>
      {children}
    </div>
  );
};

   <Container>
      <div className="App">
        <Myheader />
        <Counter {...counterProps} />
        <Myfooter />
      </div>
    </Container>

컴포넌트 사이에 jsx 요소 배치함
즉 Container의 자식으로 배치된 요소들이 Container 컴포넌트의 children으로 전달됨
그래서 Container의 디자인이 적용되는 것이다.

=======================================================
사용자의 입력 받고 처리하는 방식 이해하기 (feat 일기)
일기용 컴포넌트 만들기

1.input 태그의 값을 리엑트가 핸들링 할 수 있도록 만들어야함. => state 이용해야함
value = author 로 설정함, setauthor가 아니면 상태 변화가 불가능하므로 setauthor를 조작해야함

onChange 함수 사용해야함
       <input
          value={author}
          onChange={(e) => {
            console.log(e);
          }}
onChange 함수는 값이 바뀔 때 마다 수행되는 이벤트이다.
e는 객체이다
    console.log(e.target.value); e.target.value를 이용하면 콜백함수에 불러 사용하는 것이 가능하다.
이벤트가 발생한 target element 이름 설정되어있다면, name을 출력하는것도 가능함.

그런데 input과 textarea 코드가 동일해서 묶어주는것이 좋다.

<주의>
  const [state, setState] = useState({
    author: "",
    content: "",
  });  => author content 바뀌는 값 새로고침없이 실시간으로 갱신가능 + 렌더링
state와 setState를 사용할때 객체형태로 사용해야함.

        <input
          value={state.author}
          onChange={(e) => {
            setAuthor(e.target.value);
          }}
        />

이렇게 객체로 묶어서 접근하면 됨

      <div>
        <input
          value={state.author}
          onChange={(e) => {
            setState({
              author: e.target.value,
              content: state.content,
            });
          }}
        />
      </div>
      <div>
        <textarea
          value={state.content}
          onChange={(e) => {
            setState({
              author: state.author,
              content: e.target.content,
            });
          }}
        />
      </div>

이때 state.author, state.content는 원래값과 똑같은데
             ...state,
스프레드 연산으로 퉁치는게 가능하다
단 스프레드 연산은 객체네 최상단에 써줘야 오류가 나지 않는다.
e.target.value여야 하는데 ...state가 덮어씌워져서 값 변경이 되지 않게됨.

         onChange={(e) => {
            setState({
              ...state,
              author: e.target.value,
            });
          }}

객체로 묶었으므로 다음과 같이 코드를 작성해야함
객체의 값을 바꿀려면 새로운 객체로 바꿔야함.
state, setstate 형태 파악하기 

event handler 합치기
onChange도 겹치므로 합치는게 가능함
이떄 e.target.name으로 뭉뚱그려서 접근이 가능함.

  const handleChangeState = (e) => {
    console.log(e.target.name);
    console.log(e.target.value);

    setState({
      ...state, // 다른칸에 있는 텍스트 유지 목적 (다른 칸 상태유지)
      [e.target.name]: e.target.value, // 변수의 담긴 문자열을 key로 지정하기 위해서는 대괄호가 필요
    });
  };

        <input
          name="author"
          value={state.author}
          onChange={handleChangeState}
        />

감정점수도 저장해야함. 묶어주는 원리는 동일함, 숫자이므로 emotion의 default값은 1로 설정하기.

        <select
          name="emotion"
          value={state.emotion}
          onChange={handleChangeState}>
            
          <option value={1}>1</option>
          <option value={2}>2</option>
          <option value={3}>3</option>
          <option value={4}>4</option>
          <option value={5}>5</option>
        </select>

================
DOM element 조작법 기초

import React, {useRef, useState } from "react";
useRef를 import함

const authorInput = useRef(); // DOM 요소 접근가능 useRef함수 호출
        <input
          ref={authorInput}
          name="author"
          value={state.author}
          onChange={handleChangeState}
        />
input 태그에 ref 속성 추가

 authorInput.current.focus(); useREf라고 만든 객체는 current라는 프로퍼티를 통해 부르는것이 가능함
즉 authorInput.current는 authorInput태그를 의미함.



















