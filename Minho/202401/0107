1. 객체의 비 구조화 할당

let test = {
  one: "one",
  two: "two",
  three: "three",
  four: "four",
  five: "five"
};

let a1 = test.one;
let a2 = test.two;

let { three: a3, four: a4 } = test;

console.log(a1, a2, a3, a4);

배열을 비 구조화 할당할땐 받는 대상도 배열, 객체를 비 구조화 할당할 떈
받는 대상도 객체여야한다 => 형식을 통일시켜줘야할 필요성이 있다.

2. 스프레드 연산자

const a = {
  name: "김싸피",
  age: 25
};

const b = {
  ...a,
  tall: 175
};

... a 스프레드를 통해 b 객체는 name, age, tall을 모두 가지게 된다.

console.log(b);

const arr = ["a", "b"];

const arr2 = ["c", "d", "e", "f"];

const all = [...arr, "zzz", ...arr2];
// 배열을 스프레드 형태로 뿌려 합치는게 가능함
// 기존방식이라면?
const tmp = arr.concat(arr2);

console.log(all);
console.log(tmp);

3. 동기화 & 비동기화

JS의 작동원리 => 기본적으로는 싱글스레드 방식이여서 동기적 방식이 default이다.
여러가지일을 동시에 수행하는 것 = 비동기
Call Stack => 코드가 실행될 때 코드 스택이 쌓임

setTImeout과 같은 비동기함수는 콜스택에서 처리하는것이 아니라 webAPI로 보내버림
그래서 webAPI에 비동기 함수가 가있는동안 Call Stack 에서는 계속 코드를 실행시킴
web API에서 실행된 call back 함수는 callback queue로 옮겨지고,
eventloop를 통해 call stack으로 넘김
function taskA(a, b, cb) {
  setTimeout(() => {
    const res = a + b;
    cb(res);
  }, 3000);
}

function taskB(a, cb) {
  setTimeout(() => {
    const res = a * 2;
    cb(res);
  }, 1000);
}

function taskC(a, cb) {
  setTimeout(() => {
    const res = a * -1;
    cb(res);
  }, 2000);
}

taskA(3, 4, (res) => {
  console.log("A 결과 : ", res);
});

taskB(7, (res) => {
  console.log("B 결과 : ", res);
});

taskC(14, (res) => {
  console.log("C 결과 : ", res);
});

console.log("코드 끝"); //

+@
taskA(4, 5, (a_res) => {
  console.log("A 결과 : ", a_res);
  taskB(a_res, (b_res) => {
    console.log("B 결과 : ", b_res);
    taskC(b_res, (c_res) => {
      console.log("C 결과 : ", c_res);
    });
  });
});

비동기함수의 값을 또다른 비동기함수의 콜백으로 사용? => 콜백지옥
Promise라는 객체를 이용해서 다뤄야함

4. Promise & async & await
비동기 작업이 가질 수 있는 3가지 상태
pending(대기상태) => fulfilled, rejected 상태로 나누어 진다.

function isPositive(number, resolve, reject) {
  setTimeout(() => {
    if (typeof number === "number") {
      // resolve 상태
      resolve(number >= 0 ? "양수" : "음수");
    } else {
      // reject 상태
      reject("주어진 값이 숫자가 아닙니다");
    }
  }, 2000);
}

function isPositiveP(number) {
  const executor = (resolve, reject) => {
    setTimeout(() => {
      if (typeof number === "number") {
        //resolve 상태
        console.log(101);
        resolve(number >= 0 ? "양수" : "음수");
      } else {
        reject("주어진 값이 아닙니다");
      }
    }, 1000);
  };

  const task = new Promise(executor);
}

isPositive(
  10,
  (res) => {
    console.log("성공적으로 수행됨 : ", res);
  },
  (err) => {
    console.log("실패 하였음 : ", err);
  }
);

=> Promise를 사용하는 방식으로 바꿔야함




  const asyncTask = new Promise(executor);

비동기 작업 자체인 asyncTask를 만든 후 Promise 객체만듦
Promise 객체의 인자로 executor를 넘겨줌 (비동기 실행자 함수 넘겨줌)

res
  .then((res) => {
    console.log("작업 성공", res);
  })
  .catch((err) => {
    console.log("작업 실패", err);
  });

resolve에 해당되는것 = then, reject에 해당되는것 = catch
then chaining
taskA(5, 1)
  .then((a_res) => {
    console.log("A 결과 :", a_res);
    return taskB(a_res);
  })
  .then((b_res) => {
    console.log("B 결과 : ", b_res);
    return taskC(b_res);
  })
  .then((c_res) => {
    console.log("C 결과 : ", c_res);
  });

비동기 처리하는 코드와 결과를 처리하는 코드가 분리가 가능함 => 가독성이 좋아진다.

function taskA(a, b) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const res = a + b;
      resolve(res);
    }, 3000);
  });
}

이 함수는 Promise 객체를 return 받는다.

const b = taskA(5, 1).then((a_res) => {
  console.log("A 결과 :", a_res);
  return taskB(a_res);
});

console.log("test");
console.log("test");
console.log("test");

b.then((b_res) => {
  console.log("B 결과 : ", b_res);
  return taskC(b_res);
}).then((c_res) => {
  console.log("C 결과 : ", c_res);
});

async ?
function 앞에 async를 붙이면 return 값이 Promise 객체가 된다.
즉 자동으로 비동기처리 함수가 된다.

async를 붙여준 함수의 리턴값은 promise 객체의 resolve 결과값이 된다. (중요)

async function test() {
  return "test";
}

test().then((res) => {
  console.log(res);
});

async function test() {
  await delay(3000);

  return "test";
}

async function main() {
  const res = await test();
  console.log(res);
}

=== 연습용 코드
 
function delay(ms) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, ms);
  });
}

async function test() {
  await delay(3000);

  return "practice";
}

async function main() {
  const res = await test();
  console.log(res);
}

main();
await을 사용하면, 비동기 함수가 마치 동기적인 함수처럼 작동함.
await 키워드가 붙은 함수의 호출은, 뒤에 있는 함수가 끝나기 전까지 아래의 코드를 수행하지 않음.
즉 await줄은 동기적으로 동작되고, async 키워드가 있는 곳에서만 사용 가능하다.
=> Promise 객체를 반환하는 함수를 동기적인 함수처럼 사용하는 것

5. API 호출
API? 응용 프로그램 프로그래밍 인터페이스

기본 예제
async function getData() {
  let response = await fetch("https://jsonplaceholder.typicode.com/posts");

  let json = await response.json();
  console.log(json);
}

getData();











