1. JSX 연습
새로운 파일(페이지를 만들때) 확장자는 .js로 만들면됨 (컴포넌트 확장자 주의)
ex) 헤드역할을 하는 컴포넌트

const Myheader = () => {
  return <header>Myheader</header>;
};

export default Myheader;


App Component에 (App.js)에 자식으로 추가해줘야만 화면에 표시됨
즉 자식으로 포함하고 있어야만 화면에 표시됨

App이 최상위 부모이기 떄문
만약 이 관계를 피하고 싶다면 index.js에 직접 박아야함

jsx에서는 태그를 무조건 닫아야함
따라서 <br /> <a /> 와 같이 self-closing을 해야함.

jsx의 표현식은 반드시 하나의 부모를 가져야함.
즉 컴포넌트를 만들기위해서는 최상위 태그로 다른 모든 태그로 묶을 필요성이 있음.

최상위 태그로 묶지않고 컴포넌트를 만들고 싶다면?

import React from "react"; import 한후 React.fragment 사용

import "./App.css";

import React from "react";
import Myheader from "./MyHeader";

function App() {
  let name = "김싸피";
  return (
    <React.Fragment>
      <Myheader />
      <header className="App-header">
        <h2>안녕 리엑트 {name}</h2>
      </header>
    </React.Fragment>
  );
}

export default App;

이떄 React Fragements는 공백으로 생략이 가능하다, ex)
    <>
      <Myheader />
      <header className="App-header">
        <h2>안녕 리엑트 {name}</h2>
      </header>
    </>

JSX를 이용한 CSS 스타일링
class는 예약어여서 사용이 불가능해서, classname 으로 클래스명을 지정함.

import "./App.css";
이런식으로 css 파일을 경로로 받아 적용하는 것이 가능하다.

export default App;

css 인라인 방식으로 작성하는 법
JSX render 중괄호 안에는 숫자 혹은 문자열만 포함 가능함.
(false, 나 배열을 넣으면 렌더링이 되지 않는다.)
삼항연산자 이용하면 조건부 렌더링도 가능함
App.js 코드

return 에서 html 코드를 묶을때는 중괄호가 아니라 소괄호 이다.
// import "./App.css";

import React from "react";
import Myheader from "./MyHeader";

function App() {
  let name = "김싸피";

  const style = {
    App: {
      backgroundColor: "black",
    },
    h2: {
      color: "red",
    },
    bold_text: {
      color: "green",
    },
  };

  const number = 5;

  return (
    <div style={style.App} className="App">
      <Myheader />
      <h2 style={style.h2}>안녕 리엑트 {number}</h2>
      <b style={style.bold_text} id="bold_text">
        {number}는 : {number % 2 === 0 ? "짝수" : "홀수"} // 삼항연산자를 통해
        조건부 렌더링도 가능
      </b>
    </div>
  );
}

export default App;

+@
  <React.StrictMode> -> 의도적으로 렌더링을 2번 발생시킴

2. State (상태)
계속해서 동적으로 변화하는 특정상태, 상태에 따라 다른 동작을 함.
리엑트에서 state는 동적으로 바뀌는 데이터이고, 컴포넌트가 상태를 바꾸면서 관리를 함.

Counter.js 예제
<h2>0</h2> 에서 0이 변화하는 값인 state 이다.
import React, { useState } from "react"; => useState 사용하기 위해 import
useState method = 배열을 반환함
(1번쨰, 2번쨰 인덱스 비구조화 할당으로 받음)
setCount = 상태변화함수
즉 count라는 이름으로 상태 부름, setcount로 상태를 변화시키고, 초기값 설정함.
onClick = {increase} 중괄호 안에 함수명을 써서 호출함, onClick은 camelCase로 작성

setcount값이 바뀌면 count값도 바뀜
state가 바뀌면 counter component가 화면을 새로 그림 (리렌더링)
즉 counter.js 전체가 다시 호출됨
여러개의 state를 동시에 가져도 문제없음 예제코드

import React, { useState } from "react";

const Counter = () => {
  const [count, setCount] = useState(0); // 초기값은 0

  const increase = () => {
    setCount(count + 1);
  };

  const decrease = () => {
    setCount(count - 1);
  };

  const [count2, setCount2] = useState(0);

  const increase2 = () => {
    setCount2(count2 + 1);
  };

  const decrease2 = () => {
    setCount2(count2 - 1);
  };

  console.log("호출됨");

  return (
    <div>
      <h2>{count}</h2>
      <button onClick={increase}>+</button>
      <button onClick={decrease}>-</button>

      <h2>{count2}</h2>
      <button onClick={increase2}>+</button>
      <button onClick={decrease2}>-</button>
    </div>
  );
};

export default Counter;






